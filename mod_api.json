{
	"entities": {
		"gun": {
			"description": "The gun in the center of the screen that the player fires by holding the left mouse button.",
			"fields": [
				{
					"name": "name",
					"type": "string"
				},
				{
					"name": "sprite_path",
					"type": "resource",
					"resource_extension": ".png"
				},
				{
					"name": "rounds_per_minute",
					"type": "i32"
				},
				{
					"name": "companion",
					"type": "entity",
					"entity_type": "box"
				}
			],
			"on_functions": {
				"on_spawn": {
					"description": "Called when the player's gun is spawned."
				},
				"on_despawn": {
					"description": "Called when the player's gun is despawned."
				},
				"on_fire": {
					"description": "Called when the player's gun fires, which happens when the left mouse button is pressed or held."
				}
			}
		},
		"bullet": {
			"description": "The bullet fired by the player's gun.",
			"fields": [
				{
					"name": "name",
					"type": "string"
				},
				{
					"name": "sprite_path",
					"type": "resource",
					"resource_extension": ".png"
				},
				{
					"name": "density",
					"type": "f32"
				}
			],
			"on_functions": {
				"on_tick": {
					"description": "Called every tick."
				}
			}
		},
		"box": {
			"description": "A static or dynamic box.",
			"fields": [
				{
					"name": "name",
					"type": "string"
				},
				{
					"name": "sprite_path",
					"type": "resource",
					"resource_extension": ".png"
				},
				{
					"name": "static",
					"type": "bool"
				}
			]
		},
		"counter": {
			"description": "A counter that prints information to the console every tick.",
			"fields": [
				{
					"name": "name",
					"type": "string"
				}
			],
			"on_functions": {
				"on_tick": {
					"description": "Called every tick."
				}
			}
		}
	},
	"game_functions": {
		"spawn_bullet": {
			"description": "Spawns a bullet.",
			"arguments": [
				{
					"name": "name",
					"type": "entity",
					"entity_type": "bullet"
				},
				{
					"name": "x",
					"type": "f32"
				},
				{
					"name": "y",
					"type": "f32"
				},
				{
					"name": "angle_in_degrees",
					"type": "f32"
				},
				{
					"name": "velocity_in_meters_per_second",
					"type": "f32"
				}
			]
		},
		"rand": {
			"description": "Gets a random f32 between min and max.",
			"return_type": "f32",
			"arguments": [
				{
					"name": "min",
					"type": "f32"
				},
				{
					"name": "max",
					"type": "f32"
				}
			]
		},
		"print_i32": {
			"description": "Prints an i32.",
			"arguments": [
				{
					"name": "i",
					"type": "i32"
				}
			]
		},
		"print_f32": {
			"description": "Prints an f32.",
			"arguments": [
				{
					"name": "f",
					"type": "f32"
				}
			]
		},
		"print_string": {
			"description": "Prints a string.",
			"arguments": [
				{
					"name": "s",
					"type": "string"
				}
			]
		},
		"print_bool": {
			"description": "Prints a bool.",
			"arguments": [
				{
					"name": "b",
					"type": "bool"
				}
			]
		},
		"play_sound": {
			"description": "Plays a sound.",
			"arguments": [
				{
					"name": "path",
					"type": "resource",
					"resource_extension": ".wav"
				}
			]
		},
		"spawn_counter": {
			"description": "Spawns a counter, and returns its ID.",
			"return_type": "id",
			"arguments": [
				{
					"name": "path",
					"type": "entity",
					"entity_type": "counter"
				}
			]
		},
		"despawn_entity": {
			"description": "Despawns an entity, given its ID.",
			"arguments": [
				{
					"name": "entity_id",
					"type": "id"
				}
			]
		},
		"map_has_i32": {
			"description": "Returns whether an entity's i32 map contains a key.",
			"return_type": "bool",
			"arguments": [
				{
					"name": "entity_id",
					"type": "id"
				},
				{
					"name": "key",
					"type": "string"
				}
			]
		},
		"map_get_i32": {
			"description": "Returns the value of a key in an entity's i32 map. Note that if the map doesn't contain the key, the game will throw an error, so make sure to call map_has_i32() first!",
			"return_type": "i32",
			"arguments": [
				{
					"name": "entity_id",
					"type": "id"
				},
				{
					"name": "key",
					"type": "string"
				}
			]
		},
		"map_set_i32": {
			"description": "Sets the value of a key in an entity's i32 map. Note that if the map doesn't contain the key, the game will throw an error, so make sure to call map_has_i32() first!",
			"arguments": [
				{
					"name": "entity_id",
					"type": "id"
				},
				{
					"name": "key",
					"type": "string"
				},
				{
					"name": "value",
					"type": "i32"
				}
			]
		}
	}
}
